name: Ultimate Publish
on: 
  push:
    branches: [ main ]

# Declare default permissions as read only.
permissions: read-all

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}


jobs:
  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
      # Cache go dependencies to reduce time for CI setup
      - uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-test-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-test-
            ${{ runner.os }}-go-
      - name: Run Tests
        run: |
          go test .

  analysis:
    name: Analysis
    runs-on: ubuntu-latest
    permissions:
      # Needed to upload the results to code-scanning dashboard.
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: go

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          output: ./codeql/

      - name: "Upload artifact"
        uses: actions/upload-artifact@v3
        with:
          name: codeql.sarif
          path: ./codeql/go.sarif
          retention-days: 5

      - name: "Scorecard analysis"
        uses: ossf/scorecard-action@c1aec4ac820532bab364f02a81873c555a0ba3a1 # v1.0.4
        with:
          results_file: scorecard.sarif
          results_format: sarif
          repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}
          publish_results: true

      - name: "Upload artifact"
        uses: actions/upload-artifact@v3
        with:
          name: scorecard.sarif
          path: scorecard.sarif
          retention-days: 5
      
      - name: "Upload to code-scanning"
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: scorecard.sarif
      # - name: "Install pasarif"
      #   uses: yolocs/pasarif@v0.3

      # - name: "Check results"
      #   run: pasarif query -f scorecard.sarif -f ./codeql/go.sarif

  publish:
    name: Build Publish Sign
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    needs: [tests, analysis]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          create_credentials_file: true
          token_format: 'access_token'
          workload_identity_provider: 'projects/220951778751/locations/global/workloadIdentityPools/github-pool/providers/github'
          service_account: 'github@${{env.PROJECT_ID}}.iam.gserviceaccount.com'
    
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'

      - name: Docker configuration
        run: |-
          echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://gcr.io

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
            --tag "gcr.io/${{env.PROJECT_ID}}/wtf-provenance:$GITHUB_SHA" \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF" \
            .

      - name: Publish
        run: |-
          docker push "gcr.io/${{env.PROJECT_ID}}/wtf-provenance:$GITHUB_SHA"

      - uses: actions/download-artifact@v3
        with:
          name: codeql.sarif

      - uses: actions/download-artifact@v3
        with:
          name: scorecard.sarif

      - uses: sigstore/cosign-installer@main
      # - uses: yolocs/pasarif@v0.6

      # -a "codeql.results=$(pasarif query -v ids -f go.sarif)" \
      # -a "scorecard.results=$(pasarif query -v ids -f scorecard.sarif)" \
      - name: Sign
        run: |
          cosign sign --key gcpkms://projects/${{env.PROJECT_ID}}/locations/global/keyRings/cosign-keys/cryptoKeys/default/versions/1 \
            -a "repo=${{ github.repository }}" \
            -a "workflow=${{ github.workflow }}" \
            -a "ref=${{ github.sha }}" \
            -a "unittests.passed=true" \
            -a "codeql.results=$(cat go.sarif | jq -r '.runs[].results[].ruleId' | wc -l)" \
            -a "scorecard.results=$(cat scorecard.sarif | jq -r '.runs[].results[].ruleId' | wc -l)" \
            "gcr.io/${{env.PROJECT_ID}}/wtf-provenance:$GITHUB_SHA"
